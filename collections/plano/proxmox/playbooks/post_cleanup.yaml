- name: Remove cloud-init files
  hosts: pvenodes
  become: true
  gather_facts: false
  tasks:
    # Remove cloud-init file
    - name: Remove cloud-init file
      become: true
      ansible.builtin.file:
        path: "{{ snippets_path }}{{ item.vmid }}-user.yml"
        state: absent
      loop: "{{ computers }}"
      when: 'item.state == "new"'
      no_log: true

- name: Stop, remove drives, and restart VMs
  hosts: pvenodes[0]
  become: false
  gather_facts: false
  tasks:
    # Stop VMs
    - name: Stop VMs
      community.general.proxmox_kvm:
        api_user: "{{ api_user }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        vmid: "{{ item.vmid }}"
        state: "stopped"
        timeout: 180
      loop: "{{ computers }}"
      when: 'item.state == "new"'
      no_log: true

    # Remove cloud-init drive
    - name: Remove cloud-init drive
      community.general.proxmox_disk:
        api_user: "{{ api_user }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        vmid: "{{ item.vmid }}"
        disk: "ide2"
        state: absent
      loop: "{{ computers }}"
      when: 'item.state == "new"'
      no_log: true

    # Pause before starting VM again
    # Without a pause the task may indicate it's already started
    # When that happens, the VM doesn't get started
    - name: Pause
      ansible.builtin.pause:
        seconds: 30

    # Start VMs
    - name: Start VMs
      community.general.proxmox_kvm:
        api_user: "{{ api_user }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        vmid: "{{ item.vmid }}"
        state: "started"
      loop: "{{ computers }}"
      when: 'item.state == "new"'
      no_log: true

    # Update State
    - name: Change state
      ansible.builtin.replace:
        path: "{{ project_path }}variable_files/vms/{{ item.vmid }}.yml"
        regexp: "state: new"
        replace: "state: present"
      loop: "{{ computers }}"
      when: 'item.state == "new"'
      delegate_to: localhost
      no_log: true

    # Update Variable File
    - name: Create Variable Files
      ansible.builtin.include_role:
        name: create_variables_file
      vars:
        create_variables_file_variable_name: "vms"
